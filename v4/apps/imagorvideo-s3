{"captainVersion":4,"services":{"$$cap_appname":{"image":"ghcr.io/cshum/imagorvideo:$$cap_imagorvideo_version","environment":{"PORT":80,"IMAGOR_BASE_PATH_REDIRECT":"$$cap_env_imagor_base_path_redirect","IMAGOR_UNSAFE":"$$cap_env_imagor_unsafe","IMAGOR_SECRET":"$$cap_env_imagor_secret","IMAGOR_SIGNER_TYPE":"$$cap_env_imagor_signer_type","IMAGOR_SIGNER_TRUNCATE":"$$cap_env_imagor_signer_truncate","IMAGOR_AUTO_WEBP":"$$cap_env_imagor_auto_webp","IMAGOR_AUTO_AVIF":"$$cap_env_imagor_auto_avif","HTTP_LOADER_BASE_URL":"$$cap_env_http_loader_base_url","AWS_ACCESS_KEY_ID":"$$cap_env_aws_key_id","AWS_SECRET_ACCESS_KEY":"$$cap_env_aws_secret_access_key","AWS_REGION":"$$cap_env_aws_region","S3_ENDPOINT":"$$cap_env_s3_endpoint","S3_FORCE_PATH_STYLE":"$$cap_env_s3_force_path_style","S3_LOADER_BUCKET":"$$cap_env_s3_loader_bucket","S3_LOADER_BASE_DIR":"$$cap_env_s3-loader-bucket-dir","S3_STORAGE_BUCKET":"$$cap_env_s3_storage_bucket","S3_STORAGE_BASE_DIR":"$$cap_env_s3-storage-bucket-dir","IMAGOR_STORAGE_PATH_STYLE":"$$cap_env_imagor_storage_path_style","S3_STORAGE_EXPIRATION":"$$cap_env_s3_storage_expiration","S3_RESULT_STORAGE_BUCKET":"$$cap_env_s3_result_storage_bucket","S3_RESULT_STORAGE_BASE_DIR":"$$cap_env_s3-result-storage-bucket-dir","IMAGOR_RESULT_STORAGE_PATH_STYLE":"$$cap_env_imagor_result_storage_path_style","S3_RESULT_STORAGE_EXPIRATION":"$$cap_env_s3_result_storage_expiration","FFMPEG_FALLBACK_IMAGE":"$$cap_env_ffmpeg_fallback_image"},"restart":"always"}},"caproverOneClickApp":{"variables":[{"id":"$$cap_imagorvideo_version","label":"App Version","description":"Check out their Docker page for the valid tags https://github.com/cshum/imagorvideo/pkgs/container/imagorvideo","defaultValue":"0.4.8","validRegex":"/^([^\\s^\\/])+$/"},{"id":"$$cap_env_imagor_unsafe","label":"Imagor Undafe","description":"unsafe URL for testing (valid value 1 or 0)","defaultValue":0,"validRegex":"/^\\d$/"},{"id":"$$cap_env_imagor_secret","label":"Imagor Secret","description":"Secret key for URL signature","defaultValue":"$$cap_gen_random_hex(32)","validRegex":"/^([^\\s^\\/])+$/"},{"id":"$$cap_env_imagor_signer_type","label":"Signer Type","description":"imagor URL signature hasher type sha1, sha256, sha512 (default \"sha256\")","defaultValue":"sha256","validRegex":"/^(sha1|sha256|sha512)$/"},{"id":"$$cap_env_imagor_signer_truncate","label":"Signer Truncate","description":"imagor URL signature truncate at length","defaultValue":40,"validRegex":"/^\\d+$/"},{"id":"$$cap_env_imagor_storage_path_style","label":"Storage Path Style","description":"imagor result storage path style, original, digest, suffix (default \"original\")","defaultValue":"original","validRegex":"/^(original|digest|suffix)$/"},{"id":"$$cap_env_imagor_result_storage_path_style","label":"Result Storage Path Style","description":"imagor storage path style, original, digest (default \"original\")","defaultValue":"original","validRegex":"/^(digest|original)$/"},{"id":"$$cap_env_imagor_auto_webp","label":"Auto Webp","description":"Output WebP format automatically if browser supports","defaultValue":true,"validRegex":"/^(true|false)$/"},{"id":"$$cap_env_imagor_auto_avif","label":"Auto AVIF","description":"Output AVIF format automatically if browser supports (experimental)","defaultValue":true,"validRegex":"/^(true|false)$/"},{"id":"$$cap_env_http_loader_base_url","label":"HTTP Loader Base URL","description":"HTTP Loader base URL that prepends onto existing image path. This overrides the default scheme option."},{"id":"$$cap_env_aws_key_id","label":"AWS Key ID","description":"AWS Access Key Id","defaultValue":"","validRegex":"/^([^\\s^\\/])+$/"},{"id":"$$cap_env_aws_secret_access_key","label":"AWS Key Secret Access Key","description":"AWS key secret access key","defaultValue":"","validRegex":"/^([^\\s^\\/])+$/"},{"id":"$$cap_env_aws_region","label":"AWS Region","description":"AWS region","defaultValue":"","validRegex":"/^([^\\s^\\/])+$/"},{"id":"$$cap_env_s3_endpoint","label":"AWS S3 Endpoint","description":"Configure custom S3 endpoint for S3 compatible such as MinIO, DigitalOcean Space. eg `http://minio:9000`"},{"id":"$$cap_env_s3_force_path_style","label":"S3 Force Path Style","validRegex":"/^(0|1)$/","defaultValue":"0","description":"By default, S3 prepends bucket name as subdomain to the request URL.  This may not be desirable for a self-hosted endpoint. You can also switch to path-style requests using `S3_FORCE_PATH_STYLE=1` such that the host remains unchanged"},{"id":"$$cap_env_s3_loader_bucket","label":"AWS S3 Loader Bucket","description":"enable S3 loader by specifying bucket","defaultValue":"mybucket"},{"id":"$$cap_env_s3-loader-bucket-dir","label":"AWS S3 Loader Bucket Directory","description":"optional","defaultValue":"images"},{"id":"$$cap_env_s3_storage_bucket","label":"AWS S3 Storage Bucket","description":"enable S3 storage by specifying bucket","defaultValue":"mybucket"},{"id":"$$cap_env_s3-storage-bucket-dir","label":"AWS S3 Storage Bucket Directory","description":"optional","defaultValue":"images"},{"id":"$$cap_env_s3_storage_expiration","label":"S3 Storage Expiration","description":"S3 Storage expiration duration e.g. 24h. Default no expiration"},{"id":"$$cap_env_s3_result_storage_bucket","label":"AWS S3 Result Storage Bucket","description":"enable S3 result storage by specifying bucket","defaultValue":"mybucket"},{"id":"$$cap_env_s3-result-storage-bucket-dir","label":"AWS S3 Result Storage Bucket Directory","description":"optional","defaultValue":"images/result"},{"id":"$$cap_env_s3_result_storage_expiration","label":"S3 Result Storage Expiration","description":"S3 Result Storage expiration duration e.g. 24h. Default no expiration"},{"id":"$$cap_env_imagor_base_path_redirect","label":"Redirect URL","description":"URL to redirect for imagor / base path e.g. https://www.google.com","defaultValue":""},{"id":"$$cap_env_ffmpeg_fallback_image","label":"FFmpeg Fallback Image","description":"FFmpeg fallback image on processing error. Supports image path enabled by loaders or storages","defaultValue":""}],"instructions":{"start":"Imagorvideo is a new initiative that brings video thumbnail capability through ffmpeg, built on the foundations of imagor - a fast, Docker-ready image processing server written in Go with libvips.\n\nimagorvideo uses ffmpeg C bindings that extracts video thumbnail by selecting the best frame from a RMSE histogram. It then goes through the rest of imagor pipeline to perform image cropping, resizing and filters.\n\nimagorvideo implements ffmpeg read and seek I/O callbacks with imagor loader, storage and result storage, which supports HTTP(s), File System, AWS S3 and Google Cloud Storage out of box. For non seek-able source such as HTTP and S3, imagor simulates seek using memory or temp file buffer.\n\nThis app will store the images in S3 bucket.\nIf you want to store the images locally as docker volume use Imagor Local instead.\nGitHub: https://github.com/cshum/imagorvideo","end":"$$cap_appname deployed successfuly.\nImagorVideo is currently running in `$$cap_env_imagor_unsafe` mode.\nIn production environment, it is highly recommended turning off `IMAGOR_UNSAFE` \nby setting the `IMAGOR_UNSAFE` to `0` or removing the `IMAGOR_UNSAFE` environment variable"},"displayName":"ImagorVideo (S3 storage)","isOfficial":false,"description":"Imagor video thumbnail server in Go and ffmpeg C bindings (Stores images in S3 bucket)","documentation":"https://github.com/cshum/imagorvideo"}}
